
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000cdc  00000d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000078e  00800108  00800108  00000d78  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001426  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144d  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  00004440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c69  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00006611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
   4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
   8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
   c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  34:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_13>
  38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000068 <font5x7>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 00 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 62 51 49 49 46 22     >QIE>.B.@.bQIIF"
  c8:	41 49 49 36 18 14 12 7f 10 27 45 45 45 39 3c 4a     AII6.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7c 12 11 12 7c 41 7f 49 49 36 3e     2IyA>|...|A.II6>
 118:	41 41 41 22 41 7f 41 41 3e 7f 49 49 49 41 7f 09     AAA"A.AA>.IIIA..
 128:	09 09 01 3e 41 41 49 7a 7f 08 08 08 7f 00 41 7f     ...>AAIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
 168:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 08 54 54 54 3c 7f 08 04 04 78 00 48 7d     ....TTT<....x.H}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00                 ..A6........

00000244 <__ctors_end>:
 244:	11 24       	eor	r1, r1
 246:	1f be       	out	0x3f, r1	; 63
 248:	cf ef       	ldi	r28, 0xFF	; 255
 24a:	d8 e0       	ldi	r29, 0x08	; 8
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
 250:	11 e0       	ldi	r17, 0x01	; 1
 252:	a0 e0       	ldi	r26, 0x00	; 0
 254:	b1 e0       	ldi	r27, 0x01	; 1
 256:	ec ed       	ldi	r30, 0xDC	; 220
 258:	fc e0       	ldi	r31, 0x0C	; 12
 25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
 25c:	05 90       	lpm	r0, Z+
 25e:	0d 92       	st	X+, r0
 260:	a8 30       	cpi	r26, 0x08	; 8
 262:	b1 07       	cpc	r27, r17
 264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
 266:	28 e0       	ldi	r18, 0x08	; 8
 268:	a8 e0       	ldi	r26, 0x08	; 8
 26a:	b1 e0       	ldi	r27, 0x01	; 1
 26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
 26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
 270:	a6 39       	cpi	r26, 0x96	; 150
 272:	b2 07       	cpc	r27, r18
 274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
 276:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
 27a:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <_exit>

0000027e <__bad_interrupt>:
 27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <blank_line>:
	}
}

static void blank_line(void)
{
	if(scanLine == start_render)
 282:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <scanLine>
 286:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <scanLine+0x1>
 28a:	20 91 94 08 	lds	r18, 0x0894	; 0x800894 <start_render>
 28e:	28 17       	cp	r18, r24
 290:	19 06       	cpc	r1, r25
 292:	c1 f4       	brne	.+48     	; 0x2c4 <blank_line+0x42>
	{
		renderLine = 0;
 294:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <renderLine+0x1>
 298:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <renderLine>
		vscale = vscale_const;
 29c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vscale_const>
 2a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <vscale>
		line_handler = &active_line;
 2a4:	85 ea       	ldi	r24, 0xA5	; 165
 2a6:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if(scanLine == lines_frame)
	{
		line_handler = &vsync_line;
 2a8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <line_handler+0x1>
 2ac:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <line_handler>
	}

	++scanLine;
 2b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <scanLine>
 2b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <scanLine+0x1>
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <scanLine+0x1>
 2be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <scanLine>
}
 2c2:	08 95       	ret
	else if(scanLine == lines_frame)
 2c4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <scanLine>
 2c8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <scanLine+0x1>
 2cc:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <lines_frame>
 2d0:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <lines_frame+0x1>
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	59 f7       	brne	.-42     	; 0x2b0 <blank_line+0x2e>
		line_handler = &vsync_line;
 2da:	80 e7       	ldi	r24, 0x70	; 112
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	e4 cf       	rjmp	.-56     	; 0x2a8 <blank_line+0x26>

000002e0 <vsync_line>:

static void vsync_line(void)
{
	if(scanLine >= lines_frame)
 2e0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <scanLine>
 2e4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <scanLine+0x1>
 2e8:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <lines_frame>
 2ec:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <lines_frame+0x1>
 2f0:	28 17       	cp	r18, r24
 2f2:	39 07       	cpc	r19, r25
 2f4:	a4 f0       	brlt	.+40     	; 0x31e <vsync_line+0x3e>
	{
		OCR1A = CYCLES_VIRT_SYNC;
 2f6:	8c ea       	ldi	r24, 0xAC	; 172
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		scanLine = 0;
 302:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <scanLine+0x1>
 306:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <scanLine>
	{
		OCR1A = CYCLES_HORZ_SYNC;
		line_handler = &blank_line;
	}

	++scanLine;
 30a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <scanLine>
 30e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <scanLine+0x1>
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <scanLine+0x1>
 318:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <scanLine>
}
 31c:	08 95       	ret
	else if(scanLine == vsync_end)
 31e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <scanLine>
 322:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <scanLine+0x1>
 326:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <vsync_end>
 32a:	28 17       	cp	r18, r24
 32c:	19 06       	cpc	r1, r25
 32e:	69 f7       	brne	.-38     	; 0x30a <vsync_line+0x2a>
		OCR1A = CYCLES_HORZ_SYNC;
 330:	8a e4       	ldi	r24, 0x4A	; 74
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 338:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		line_handler = &blank_line;
 33c:	81 e4       	ldi	r24, 0x41	; 65
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <line_handler+0x1>
 344:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <line_handler>
 348:	e0 cf       	rjmp	.-64     	; 0x30a <vsync_line+0x2a>

0000034a <active_line>:

static void active_line(void)
{
 34a:	0f 93       	push	r16
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
		"    breq 102f                 \n\t"
		"    rjmp 102f                 \n"
		"101:                          \n\t"
		"    nop                       \n"
		"102:                          \n"
		:: [time] "a" (output_delay), [tcnt1l] "a" (TCNT1L)
 350:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	__asm__ __volatile__
 354:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <output_delay>
 358:	2a 50       	subi	r18, 0x0A	; 10
 35a:	23 1b       	sub	r18, r19
 35c:	23 50       	subi	r18, 0x03	; 3
 35e:	f0 f7       	brcc	.-4      	; 0x35c <active_line+0x12>
 360:	2d 5f       	subi	r18, 0xFD	; 253
 362:	19 f0       	breq	.+6      	; 0x36a <active_line+0x20>
 364:	2a 95       	dec	r18
 366:	11 f0       	breq	.+4      	; 0x36c <active_line+0x22>
 368:	01 c0       	rjmp	.+2      	; 0x36c <active_line+0x22>
 36a:	00 00       	nop
		"y" (renderLine), [hres] "d" (WIDTH) : "r16"
	);

	#elif RMETHOD == 4

	__asm__ __volatile__
 36c:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <renderLine>
 370:	d0 91 10 01 	lds	r29, 0x0110	; 0x800110 <renderLine+0x1>
 374:	a2 e1       	ldi	r26, 0x12	; 18
 376:	b1 e0       	ldi	r27, 0x01	; 1
 378:	84 e1       	ldi	r24, 0x14	; 20
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	ac 0f       	add	r26, r28
 37e:	bd 1f       	adc	r27, r29
 380:	02 c0       	rjmp	.+4      	; 0x386 <enter4>

00000382 <loop4>:
 382:	00 0c       	add	r0, r0
 384:	0b b8       	out	0x0b, r0	; 11

00000386 <enter4>:
 386:	0d 90       	ld	r0, X+
 388:	00 00       	nop
 38a:	0b b8       	out	0x0b, r0	; 11
 38c:	00 00       	nop
 38e:	00 00       	nop
 390:	00 0c       	add	r0, r0
 392:	0b b8       	out	0x0b, r0	; 11
 394:	00 00       	nop
 396:	00 00       	nop
 398:	00 0c       	add	r0, r0
 39a:	0b b8       	out	0x0b, r0	; 11
 39c:	00 00       	nop
 39e:	00 00       	nop
 3a0:	00 0c       	add	r0, r0
 3a2:	0b b8       	out	0x0b, r0	; 11
 3a4:	00 00       	nop
 3a6:	00 00       	nop
 3a8:	00 0c       	add	r0, r0
 3aa:	0b b8       	out	0x0b, r0	; 11
 3ac:	00 00       	nop
 3ae:	00 00       	nop
 3b0:	00 0c       	add	r0, r0
 3b2:	0b b8       	out	0x0b, r0	; 11
 3b4:	00 00       	nop
 3b6:	00 0c       	add	r0, r0
 3b8:	8a 95       	dec	r24
 3ba:	0b b8       	out	0x0b, r0	; 11
 3bc:	11 f7       	brne	.-60     	; 0x382 <loop4>
 3be:	00 00       	nop
 3c0:	00 0c       	add	r0, r0
 3c2:	0b b8       	out	0x0b, r0	; 11
 3c4:	00 00       	nop
 3c6:	00 00       	nop
 3c8:	00 00       	nop
 3ca:	5f 98       	cbi	0x0b, 7	; 11
		"y" (renderLine), [hres] "d" (WIDTH) : "r16"
	);

	#endif

	if(!vscale)
 3cc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <vscale>
 3d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vscale_const>
 3d4:	91 11       	cpse	r25, r1
 3d6:	2c c0       	rjmp	.+88     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
	{
		vscale = vscale_const;
 3d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <vscale>
		renderLine += WIDTH;
 3dc:	64 96       	adiw	r28, 0x14	; 20
 3de:	d0 93 10 01 	sts	0x0110, r29	; 0x800110 <renderLine+0x1>
 3e2:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <renderLine>
	else
	{
		--vscale;
	}

	if(scanLine++ == (int)(start_render + HEIGHT * (vscale_const + 1)))
 3e6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <scanLine>
 3ea:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <scanLine+0x1>
 3ee:	a9 01       	movw	r20, r18
 3f0:	4f 5f       	subi	r20, 0xFF	; 255
 3f2:	5f 4f       	sbci	r21, 0xFF	; 255
 3f4:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <scanLine+0x1>
 3f8:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <scanLine>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	60 e6       	ldi	r22, 0x60	; 96
 402:	68 9f       	mul	r22, r24
 404:	a0 01       	movw	r20, r0
 406:	69 9f       	mul	r22, r25
 408:	50 0d       	add	r21, r0
 40a:	11 24       	eor	r1, r1
 40c:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <start_render>
 410:	84 0f       	add	r24, r20
 412:	95 2f       	mov	r25, r21
 414:	91 1d       	adc	r25, r1
 416:	28 17       	cp	r18, r24
 418:	39 07       	cpc	r19, r25
 41a:	31 f4       	brne	.+12     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
	{
		line_handler = &blank_line;
 41c:	81 e4       	ldi	r24, 0x41	; 65
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <line_handler+0x1>
 424:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <line_handler>
	}
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret
		--vscale;
 430:	91 50       	subi	r25, 0x01	; 1
 432:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <vscale>
 436:	d7 cf       	rjmp	.-82     	; 0x3e6 <enter4+0x60>

00000438 <abs>:
	return (v < 0) ? (v * -1) : v;
 438:	97 ff       	sbrs	r25, 7
 43a:	03 c0       	rjmp	.+6      	; 0x442 <abs+0xa>
 43c:	91 95       	neg	r25
 43e:	81 95       	neg	r24
 440:	91 09       	sbc	r25, r1
}
 442:	08 95       	ret

00000444 <video_begin>:
	VID_DDR |= (1 << VID_PIN);
 444:	57 9a       	sbi	0x0a, 7	; 10
	VID_PORT &= ~(1 << VID_PIN);
 446:	5f 98       	cbi	0x0b, 7	; 11
	SYNC_DDR |= (1 << SYNC_PIN);
 448:	21 9a       	sbi	0x04, 1	; 4
	SYNC_PORT |= (1 << SYNC_PIN);
 44a:	29 9a       	sbi	0x05, 1	; 5
	TCCR1A = (1 << COM1A1) | (1 << COM1A0) | (1 << WGM11);
 44c:	92 ec       	ldi	r25, 0xC2	; 194
 44e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);
 452:	99 e1       	ldi	r25, 0x19	; 25
 454:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	if(mode)
 458:	88 23       	and	r24, r24
 45a:	a1 f1       	breq	.+104    	; 0x4c4 <video_begin+0x80>
		vscale_const = VSCALE_PAL;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <vscale_const>
		start_render = START_RENDER_PAL;
 462:	8c e3       	ldi	r24, 0x3C	; 60
 464:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <start_render>
		output_delay = PAL_CYCLES_OUTPUT_START;
 468:	87 ec       	ldi	r24, 0xC7	; 199
 46a:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <output_delay>
		vsync_end = PAL_LINE_STOP_VSYNC;
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <vsync_end>
		lines_frame = PAL_LINE_FRAME;
 474:	88 e3       	ldi	r24, 0x38	; 56
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <lines_frame+0x1>
 47c:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <lines_frame>
		ICR1 = PAL_CYCLES_SCANLINE;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	93 e0       	ldi	r25, 0x03	; 3
		ICR1 = NTSC_CYCLES_SCANLINE;
 484:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 488:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	vscale = vscale_const;
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <vscale>
	OCR1A = CYCLES_HORZ_SYNC;
 492:	8a e4       	ldi	r24, 0x4A	; 74
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 49a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	scanLine = lines_frame + 1;
 49e:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <lines_frame>
 4a2:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <lines_frame+0x1>
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <scanLine+0x1>
 4ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <scanLine>
	line_handler = &vsync_line;
 4b0:	80 e7       	ldi	r24, 0x70	; 112
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <line_handler+0x1>
 4b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <line_handler>
	TIMSK1 = (1 << TOIE1);
 4bc:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 4c0:	78 94       	sei
}
 4c2:	08 95       	ret
		vscale_const = VSCALE_NTSC;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <vscale_const>
		start_render = START_RENDER_NTSC;
 4ca:	8b e2       	ldi	r24, 0x2B	; 43
 4cc:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <start_render>
		output_delay = NTSC_CYCLES_OUTPUT_START;
 4d0:	8f eb       	ldi	r24, 0xBF	; 191
 4d2:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <output_delay>
		vsync_end = NTSC_LINE_STOP_VSYNC;
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <vsync_end>
		lines_frame = NTSC_LINE_FRAME;
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	90 93 93 08 	sts	0x0893, r25	; 0x800893 <lines_frame+0x1>
 4e4:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <lines_frame>
		ICR1 = NTSC_CYCLES_SCANLINE;
 4e8:	87 ef       	ldi	r24, 0xF7	; 247
 4ea:	93 e0       	ldi	r25, 0x03	; 3
 4ec:	cb cf       	rjmp	.-106    	; 0x484 <video_begin+0x40>

000004ee <video_sp>:
	switch(video_color)
 4ee:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 4f2:	91 30       	cpi	r25, 0x01	; 1
 4f4:	e9 f0       	breq	.+58     	; 0x530 <video_sp+0x42>
 4f6:	92 30       	cpi	r25, 0x02	; 2
 4f8:	99 f1       	breq	.+102    	; 0x560 <video_sp+0x72>
 4fa:	91 11       	cpse	r25, r1
 4fc:	18 c0       	rjmp	.+48     	; 0x52e <video_sp+0x40>
			frame[(x >> 3) + (y * WIDTH)] &= (~0x80 >> (x & 7));
 4fe:	e8 2f       	mov	r30, r24
 500:	e6 95       	lsr	r30
 502:	e6 95       	lsr	r30
 504:	e6 95       	lsr	r30
 506:	94 e1       	ldi	r25, 0x14	; 20
 508:	69 9f       	mul	r22, r25
 50a:	b0 01       	movw	r22, r0
 50c:	11 24       	eor	r1, r1
 50e:	e6 0f       	add	r30, r22
 510:	f7 2f       	mov	r31, r23
 512:	f1 1d       	adc	r31, r1
 514:	ee 5e       	subi	r30, 0xEE	; 238
 516:	fe 4f       	sbci	r31, 0xFE	; 254
 518:	87 70       	andi	r24, 0x07	; 7
 51a:	2f e7       	ldi	r18, 0x7F	; 127
 51c:	3f ef       	ldi	r19, 0xFF	; 255
 51e:	02 c0       	rjmp	.+4      	; 0x524 <video_sp+0x36>
 520:	35 95       	asr	r19
 522:	27 95       	ror	r18
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <video_sp+0x32>
 528:	80 81       	ld	r24, Z
 52a:	82 23       	and	r24, r18
			frame[(x >> 3) + (y * WIDTH)] ^= (0x80 >> (x & 7));
 52c:	80 83       	st	Z, r24
}
 52e:	08 95       	ret
			frame[(x >> 3) + (y * WIDTH)] |= (0x80 >> (x & 7));
 530:	e8 2f       	mov	r30, r24
 532:	e6 95       	lsr	r30
 534:	e6 95       	lsr	r30
 536:	e6 95       	lsr	r30
 538:	94 e1       	ldi	r25, 0x14	; 20
 53a:	69 9f       	mul	r22, r25
 53c:	b0 01       	movw	r22, r0
 53e:	11 24       	eor	r1, r1
 540:	e6 0f       	add	r30, r22
 542:	f7 2f       	mov	r31, r23
 544:	f1 1d       	adc	r31, r1
 546:	ee 5e       	subi	r30, 0xEE	; 238
 548:	fe 4f       	sbci	r31, 0xFE	; 254
 54a:	87 70       	andi	r24, 0x07	; 7
 54c:	20 e8       	ldi	r18, 0x80	; 128
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <video_sp+0x68>
 552:	35 95       	asr	r19
 554:	27 95       	ror	r18
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <video_sp+0x64>
 55a:	80 81       	ld	r24, Z
 55c:	82 2b       	or	r24, r18
 55e:	e6 cf       	rjmp	.-52     	; 0x52c <video_sp+0x3e>
			frame[(x >> 3) + (y * WIDTH)] ^= (0x80 >> (x & 7));
 560:	e8 2f       	mov	r30, r24
 562:	e6 95       	lsr	r30
 564:	e6 95       	lsr	r30
 566:	e6 95       	lsr	r30
 568:	94 e1       	ldi	r25, 0x14	; 20
 56a:	69 9f       	mul	r22, r25
 56c:	b0 01       	movw	r22, r0
 56e:	11 24       	eor	r1, r1
 570:	e6 0f       	add	r30, r22
 572:	f7 2f       	mov	r31, r23
 574:	f1 1d       	adc	r31, r1
 576:	ee 5e       	subi	r30, 0xEE	; 238
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	87 70       	andi	r24, 0x07	; 7
 57c:	20 e8       	ldi	r18, 0x80	; 128
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <video_sp+0x98>
 582:	35 95       	asr	r19
 584:	27 95       	ror	r18
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <video_sp+0x94>
 58a:	80 81       	ld	r24, Z
 58c:	82 27       	eor	r24, r18
 58e:	ce cf       	rjmp	.-100    	; 0x52c <video_sp+0x3e>

00000590 <video_set_color>:
	video_color = color;
 590:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 594:	08 95       	ret

00000596 <video_set_pixel>:
	if(x < PWIDTH && y < HEIGHT)
 596:	80 3a       	cpi	r24, 0xA0	; 160
 598:	20 f4       	brcc	.+8      	; 0x5a2 <video_set_pixel+0xc>
 59a:	60 36       	cpi	r22, 0x60	; 96
 59c:	10 f4       	brcc	.+4      	; 0x5a2 <video_set_pixel+0xc>
		video_sp(x, y);
 59e:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <video_sp>
}
 5a2:	08 95       	ret

000005a4 <video_get_pixel>:
	return(x < PWIDTH && y < HEIGHT &&
 5a4:	80 3a       	cpi	r24, 0xA0	; 160
 5a6:	e8 f4       	brcc	.+58     	; 0x5e2 <video_get_pixel+0x3e>
 5a8:	60 36       	cpi	r22, 0x60	; 96
 5aa:	d8 f4       	brcc	.+54     	; 0x5e2 <video_get_pixel+0x3e>
			(frame[x / 8 + y * WIDTH] & (0x80 >> (x & 7))));
 5ac:	e8 2f       	mov	r30, r24
 5ae:	e6 95       	lsr	r30
 5b0:	e6 95       	lsr	r30
 5b2:	e6 95       	lsr	r30
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	ee 5e       	subi	r30, 0xEE	; 238
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	94 e1       	ldi	r25, 0x14	; 20
 5bc:	69 9f       	mul	r22, r25
 5be:	e0 0d       	add	r30, r0
 5c0:	f1 1d       	adc	r31, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	20 81       	ld	r18, Z
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	87 70       	andi	r24, 0x07	; 7
 5ca:	40 e8       	ldi	r20, 0x80	; 128
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <video_get_pixel+0x30>
 5d0:	55 95       	asr	r21
 5d2:	47 95       	ror	r20
 5d4:	8a 95       	dec	r24
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <video_get_pixel+0x2c>
 5d8:	24 23       	and	r18, r20
 5da:	35 23       	and	r19, r21
	return(x < PWIDTH && y < HEIGHT &&
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	23 2b       	or	r18, r19
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <video_get_pixel+0x40>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
}
 5e4:	08 95       	ret

000005e6 <video_clear>:
	switch(video_color)
 5e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	c1 f0       	breq	.+48     	; 0x61e <video_clear+0x38>
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	51 f0       	breq	.+20     	; 0x606 <video_clear+0x20>
 5f2:	81 11       	cpse	r24, r1
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <video_clear+0x1e>
	for(i = 0; i < WIDTH * HEIGHT; ++i)
 5f6:	e2 e1       	ldi	r30, 0x12	; 18
 5f8:	f1 e0       	ldi	r31, 0x01	; 1
		frame[i] = val;
 5fa:	81 93       	st	Z+, r24
	for(i = 0; i < WIDTH * HEIGHT; ++i)
 5fc:	98 e0       	ldi	r25, 0x08	; 8
 5fe:	e2 39       	cpi	r30, 0x92	; 146
 600:	f9 07       	cpc	r31, r25
 602:	d9 f7       	brne	.-10     	; 0x5fa <video_clear+0x14>
}
 604:	08 95       	ret
 606:	e2 e1       	ldi	r30, 0x12	; 18
 608:	f1 e0       	ldi	r31, 0x01	; 1
				frame[i] = ~frame[i];
 60a:	81 91       	ld	r24, Z+
 60c:	df 01       	movw	r26, r30
 60e:	11 97       	sbiw	r26, 0x01	; 1
 610:	80 95       	com	r24
 612:	8c 93       	st	X, r24
			for(i = 0; i < WIDTH * HEIGHT; ++i)
 614:	88 e0       	ldi	r24, 0x08	; 8
 616:	e2 39       	cpi	r30, 0x92	; 146
 618:	f8 07       	cpc	r31, r24
 61a:	b9 f7       	brne	.-18     	; 0x60a <video_clear+0x24>
 61c:	08 95       	ret
	switch(video_color)
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	ea cf       	rjmp	.-44     	; 0x5f6 <video_clear+0x10>

00000622 <video_rect>:
{
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	f8 2e       	mov	r15, r24
 62e:	c6 2f       	mov	r28, r22
 630:	14 2f       	mov	r17, r20
 632:	d2 2f       	mov	r29, r18
	if(x0 >= PWIDTH) { x0 = PWIDTH - 1; }
 634:	08 2f       	mov	r16, r24
 636:	8f e9       	ldi	r24, 0x9F	; 159
 638:	8f 15       	cp	r24, r15
 63a:	08 f4       	brcc	.+2      	; 0x63e <video_rect+0x1c>
 63c:	0f e9       	ldi	r16, 0x9F	; 159
	if(y0 >= HEIGHT) { y0 = HEIGHT - 1; }
 63e:	c0 36       	cpi	r28, 0x60	; 96
 640:	08 f0       	brcs	.+2      	; 0x644 <video_rect+0x22>
 642:	cf e5       	ldi	r28, 0x5F	; 95
	if(x1 >= PWIDTH) { x1 = PWIDTH - 1; }
 644:	10 3a       	cpi	r17, 0xA0	; 160
 646:	08 f0       	brcs	.+2      	; 0x64a <video_rect+0x28>
 648:	1f e9       	ldi	r17, 0x9F	; 159
	if(y1 >= HEIGHT) { y1 = HEIGHT - 1; }
 64a:	d0 36       	cpi	r29, 0x60	; 96
 64c:	08 f0       	brcs	.+2      	; 0x650 <video_rect+0x2e>
 64e:	df e5       	ldi	r29, 0x5F	; 95
	while(y0 < y1)
 650:	cd 17       	cp	r28, r29
 652:	70 f0       	brcs	.+28     	; 0x670 <video_rect+0x4e>
	frame[0] = 0xFF;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <frame>
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	08 95       	ret
			video_sp(x0, y0);
 666:	6c 2f       	mov	r22, r28
 668:	80 2f       	mov	r24, r16
 66a:	0e 94 77 02 	call	0x4ee	; 0x4ee <video_sp>
			++x0;
 66e:	0f 5f       	subi	r16, 0xFF	; 255
		while(x0 < x1)
 670:	01 17       	cp	r16, r17
 672:	c8 f3       	brcs	.-14     	; 0x666 <video_rect+0x44>
		++y0;
 674:	cf 5f       	subi	r28, 0xFF	; 255
		x0 = ox;
 676:	0f 2d       	mov	r16, r15
 678:	eb cf       	rjmp	.-42     	; 0x650 <video_rect+0x2e>

0000067a <video_circle>:
{
 67a:	2f 92       	push	r2
 67c:	3f 92       	push	r3
 67e:	4f 92       	push	r4
 680:	5f 92       	push	r5
 682:	6f 92       	push	r6
 684:	7f 92       	push	r7
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <video_circle+0x26>
 6a0:	0f 92       	push	r0
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	68 2e       	mov	r6, r24
 6a8:	76 2e       	mov	r7, r22
 6aa:	6a 01       	movw	r12, r20
	int16_t x = radius - 1, y = 0, dx = 1, dy = 1,
 6ac:	7a 01       	movw	r14, r20
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	e2 1a       	sub	r14, r18
 6b2:	f1 08       	sbc	r15, r1
	err = dx - (radius << 1);
 6b4:	cc 0c       	add	r12, r12
 6b6:	dd 1c       	adc	r13, r13
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	8c 19       	sub	r24, r12
 6be:	9d 09       	sbc	r25, r13
 6c0:	9b 83       	std	Y+3, r25	; 0x03
 6c2:	8a 83       	std	Y+2, r24	; 0x02
	int16_t x = radius - 1, y = 0, dx = 1, dy = 1,
 6c4:	88 24       	eor	r8, r8
 6c6:	83 94       	inc	r8
 6c8:	91 2c       	mov	r9, r1
 6ca:	aa 24       	eor	r10, r10
 6cc:	a3 94       	inc	r10
 6ce:	b1 2c       	mov	r11, r1
 6d0:	10 e0       	ldi	r17, 0x00	; 0
 6d2:	00 e0       	ldi	r16, 0x00	; 0
	while(x >= y)
 6d4:	e0 16       	cp	r14, r16
 6d6:	f1 06       	cpc	r15, r17
 6d8:	b4 f4       	brge	.+44     	; 0x706 <video_circle+0x8c>
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	ff 90       	pop	r15
 6ea:	ef 90       	pop	r14
 6ec:	df 90       	pop	r13
 6ee:	cf 90       	pop	r12
 6f0:	bf 90       	pop	r11
 6f2:	af 90       	pop	r10
 6f4:	9f 90       	pop	r9
 6f6:	8f 90       	pop	r8
 6f8:	7f 90       	pop	r7
 6fa:	6f 90       	pop	r6
 6fc:	5f 90       	pop	r5
 6fe:	4f 90       	pop	r4
 700:	3f 90       	pop	r3
 702:	2f 90       	pop	r2
 704:	08 95       	ret
		video_set_pixel(x0 + x, y0 + y);
 706:	37 2c       	mov	r3, r7
 708:	30 0e       	add	r3, r16
 70a:	63 2d       	mov	r22, r3
 70c:	96 2d       	mov	r25, r6
 70e:	9e 0d       	add	r25, r14
 710:	99 83       	std	Y+1, r25	; 0x01
 712:	89 2f       	mov	r24, r25
 714:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 + y, y0 + x);
 718:	47 2c       	mov	r4, r7
 71a:	4e 0c       	add	r4, r14
 71c:	64 2d       	mov	r22, r4
 71e:	56 2c       	mov	r5, r6
 720:	50 0e       	add	r5, r16
 722:	85 2d       	mov	r24, r5
 724:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 - y, y0 + x);
 728:	64 2d       	mov	r22, r4
 72a:	46 2c       	mov	r4, r6
 72c:	40 1a       	sub	r4, r16
 72e:	84 2d       	mov	r24, r4
 730:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 - x, y0 + y);
 734:	63 2d       	mov	r22, r3
 736:	36 2c       	mov	r3, r6
 738:	3e 18       	sub	r3, r14
 73a:	83 2d       	mov	r24, r3
 73c:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 - x, y0 - y);
 740:	27 2c       	mov	r2, r7
 742:	20 1a       	sub	r2, r16
 744:	62 2d       	mov	r22, r2
 746:	83 2d       	mov	r24, r3
 748:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 - y, y0 - x);
 74c:	37 2c       	mov	r3, r7
 74e:	3e 18       	sub	r3, r14
 750:	63 2d       	mov	r22, r3
 752:	84 2d       	mov	r24, r4
 754:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 + y, y0 - x);
 758:	63 2d       	mov	r22, r3
 75a:	85 2d       	mov	r24, r5
 75c:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		video_set_pixel(x0 + x, y0 - y);
 760:	62 2d       	mov	r22, r2
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		if(err <= 0)
 768:	2a 81       	ldd	r18, Y+2	; 0x02
 76a:	3b 81       	ldd	r19, Y+3	; 0x03
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	7c f0       	brlt	.+30     	; 0x790 <video_circle+0x116>
			++y;
 772:	0f 5f       	subi	r16, 0xFF	; 255
 774:	1f 4f       	sbci	r17, 0xFF	; 255
			err += dy;
 776:	28 0d       	add	r18, r8
 778:	39 1d       	adc	r19, r9
 77a:	3b 83       	std	Y+3, r19	; 0x03
 77c:	2a 83       	std	Y+2, r18	; 0x02
			dy += 2;
 77e:	32 e0       	ldi	r19, 0x02	; 2
 780:	83 0e       	add	r8, r19
 782:	91 1c       	adc	r9, r1
		if(err > 0)
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	9b 81       	ldd	r25, Y+3	; 0x03
 788:	18 16       	cp	r1, r24
 78a:	19 06       	cpc	r1, r25
 78c:	0c f0       	brlt	.+2      	; 0x790 <video_circle+0x116>
 78e:	a2 cf       	rjmp	.-188    	; 0x6d4 <video_circle+0x5a>
			--x;
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	e9 1a       	sub	r14, r25
 794:	f1 08       	sbc	r15, r1
			dx += 2;
 796:	22 e0       	ldi	r18, 0x02	; 2
 798:	a2 0e       	add	r10, r18
 79a:	b1 1c       	adc	r11, r1
			err += dx - (radius << 1);
 79c:	c5 01       	movw	r24, r10
 79e:	8c 19       	sub	r24, r12
 7a0:	9d 09       	sbc	r25, r13
 7a2:	2a 81       	ldd	r18, Y+2	; 0x02
 7a4:	3b 81       	ldd	r19, Y+3	; 0x03
 7a6:	28 0f       	add	r18, r24
 7a8:	39 1f       	adc	r19, r25
 7aa:	3b 83       	std	Y+3, r19	; 0x03
 7ac:	2a 83       	std	Y+2, r18	; 0x02
 7ae:	92 cf       	rjmp	.-220    	; 0x6d4 <video_circle+0x5a>

000007b0 <video_hline>:
{
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	c8 2f       	mov	r28, r24
 7b8:	16 2f       	mov	r17, r22
 7ba:	d4 2f       	mov	r29, r20
	if(x < PWIDTH && y < HEIGHT && (e = x + l) < PWIDTH)
 7bc:	80 3a       	cpi	r24, 0xA0	; 160
 7be:	28 f4       	brcc	.+10     	; 0x7ca <video_hline+0x1a>
 7c0:	60 36       	cpi	r22, 0x60	; 96
 7c2:	18 f4       	brcc	.+6      	; 0x7ca <video_hline+0x1a>
 7c4:	d8 0f       	add	r29, r24
 7c6:	d0 3a       	cpi	r29, 0xA0	; 160
 7c8:	48 f0       	brcs	.+18     	; 0x7dc <video_hline+0x2c>
}
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	08 95       	ret
			video_sp(x, y);
 7d2:	61 2f       	mov	r22, r17
 7d4:	8c 2f       	mov	r24, r28
 7d6:	0e 94 77 02 	call	0x4ee	; 0x4ee <video_sp>
		for(; x < e; ++x)
 7da:	cf 5f       	subi	r28, 0xFF	; 255
 7dc:	cd 17       	cp	r28, r29
 7de:	c8 f3       	brcs	.-14     	; 0x7d2 <video_hline+0x22>
 7e0:	f4 cf       	rjmp	.-24     	; 0x7ca <video_hline+0x1a>

000007e2 <video_vline>:
{
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	18 2f       	mov	r17, r24
 7ea:	c6 2f       	mov	r28, r22
 7ec:	d4 2f       	mov	r29, r20
	if(x < PWIDTH && y < HEIGHT && (e = y + l) < HEIGHT)
 7ee:	80 3a       	cpi	r24, 0xA0	; 160
 7f0:	28 f4       	brcc	.+10     	; 0x7fc <video_vline+0x1a>
 7f2:	60 36       	cpi	r22, 0x60	; 96
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <video_vline+0x1a>
 7f6:	d6 0f       	add	r29, r22
 7f8:	d0 36       	cpi	r29, 0x60	; 96
 7fa:	48 f0       	brcs	.+18     	; 0x80e <video_vline+0x2c>
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	08 95       	ret
			video_sp(x, y);
 804:	6c 2f       	mov	r22, r28
 806:	81 2f       	mov	r24, r17
 808:	0e 94 77 02 	call	0x4ee	; 0x4ee <video_sp>
		for(; y < e; ++y)
 80c:	cf 5f       	subi	r28, 0xFF	; 255
 80e:	cd 17       	cp	r28, r29
 810:	c8 f3       	brcs	.-14     	; 0x804 <video_vline+0x22>
 812:	f4 cf       	rjmp	.-24     	; 0x7fc <video_vline+0x1a>

00000814 <video_line>:
{
 814:	2f 92       	push	r2
 816:	3f 92       	push	r3
 818:	4f 92       	push	r4
 81a:	5f 92       	push	r5
 81c:	6f 92       	push	r6
 81e:	7f 92       	push	r7
 820:	8f 92       	push	r8
 822:	9f 92       	push	r9
 824:	af 92       	push	r10
 826:	bf 92       	push	r11
 828:	cf 92       	push	r12
 82a:	df 92       	push	r13
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	00 d0       	rcall	.+0      	; 0x83a <video_line+0x26>
 83a:	00 d0       	rcall	.+0      	; 0x83c <video_line+0x28>
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	7c 01       	movw	r14, r24
 842:	8b 01       	movw	r16, r22
 844:	3a 01       	movw	r6, r20
 846:	29 01       	movw	r4, r18
	int16_t dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 848:	6a 01       	movw	r12, r20
 84a:	c8 1a       	sub	r12, r24
 84c:	d9 0a       	sbc	r13, r25
 84e:	d7 fe       	sbrs	r13, 7
 850:	03 c0       	rjmp	.+6      	; 0x858 <video_line+0x44>
 852:	d1 94       	neg	r13
 854:	c1 94       	neg	r12
 856:	d1 08       	sbc	r13, r1
 858:	e6 14       	cp	r14, r6
 85a:	f7 04       	cpc	r15, r7
 85c:	0c f4       	brge	.+2      	; 0x860 <video_line+0x4c>
 85e:	4b c0       	rjmp	.+150    	; 0x8f6 <video_line+0xe2>
 860:	2f ef       	ldi	r18, 0xFF	; 255
 862:	3f ef       	ldi	r19, 0xFF	; 255
 864:	3a 83       	std	Y+2, r19	; 0x02
 866:	29 83       	std	Y+1, r18	; 0x01
	int16_t dy = abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 868:	42 01       	movw	r8, r4
 86a:	80 1a       	sub	r8, r16
 86c:	91 0a       	sbc	r9, r17
 86e:	97 fe       	sbrs	r9, 7
 870:	03 c0       	rjmp	.+6      	; 0x878 <video_line+0x64>
 872:	91 94       	neg	r9
 874:	81 94       	neg	r8
 876:	91 08       	sbc	r9, r1
 878:	22 24       	eor	r2, r2
 87a:	2a 94       	dec	r2
 87c:	32 2c       	mov	r3, r2
 87e:	04 15       	cp	r16, r4
 880:	15 05       	cpc	r17, r5
 882:	1c f4       	brge	.+6      	; 0x88a <video_line+0x76>
 884:	22 24       	eor	r2, r2
 886:	23 94       	inc	r2
 888:	31 2c       	mov	r3, r1
	int16_t err = (dx > dy ? dx : -dy) / 2, e2;
 88a:	8c 14       	cp	r8, r12
 88c:	9d 04       	cpc	r9, r13
 88e:	c4 f1       	brlt	.+112    	; 0x900 <__stack+0x1>
 890:	22 27       	eor	r18, r18
 892:	33 27       	eor	r19, r19
 894:	28 19       	sub	r18, r8
 896:	39 09       	sbc	r19, r9
 898:	3c 83       	std	Y+4, r19	; 0x04
 89a:	2b 83       	std	Y+3, r18	; 0x03
 89c:	37 ff       	sbrs	r19, 7
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <video_line+0x94>
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	3c 83       	std	Y+4, r19	; 0x04
 8a6:	2b 83       	std	Y+3, r18	; 0x03
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	9c 81       	ldd	r25, Y+4	; 0x04
 8ac:	95 95       	asr	r25
 8ae:	87 95       	ror	r24
 8b0:	9c 83       	std	Y+4, r25	; 0x04
 8b2:	8b 83       	std	Y+3, r24	; 0x03
		if(e2 > -dx)
 8b4:	aa 24       	eor	r10, r10
 8b6:	bb 24       	eor	r11, r11
 8b8:	ac 18       	sub	r10, r12
 8ba:	bd 08       	sbc	r11, r13
	while(x0 != x1 && y0 != y1)
 8bc:	e6 14       	cp	r14, r6
 8be:	f7 04       	cpc	r15, r7
 8c0:	19 f0       	breq	.+6      	; 0x8c8 <video_line+0xb4>
 8c2:	04 15       	cp	r16, r4
 8c4:	15 05       	cpc	r17, r5
 8c6:	11 f5       	brne	.+68     	; 0x90c <__stack+0xd>
}
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	0f 90       	pop	r0
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	ef 90       	pop	r14
 8dc:	df 90       	pop	r13
 8de:	cf 90       	pop	r12
 8e0:	bf 90       	pop	r11
 8e2:	af 90       	pop	r10
 8e4:	9f 90       	pop	r9
 8e6:	8f 90       	pop	r8
 8e8:	7f 90       	pop	r7
 8ea:	6f 90       	pop	r6
 8ec:	5f 90       	pop	r5
 8ee:	4f 90       	pop	r4
 8f0:	3f 90       	pop	r3
 8f2:	2f 90       	pop	r2
 8f4:	08 95       	ret
	int16_t dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	9a 83       	std	Y+2, r25	; 0x02
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	b4 cf       	rjmp	.-152    	; 0x868 <video_line+0x54>
	int16_t err = (dx > dy ? dx : -dy) / 2, e2;
 900:	96 01       	movw	r18, r12
 902:	35 95       	asr	r19
 904:	27 95       	ror	r18
 906:	3c 83       	std	Y+4, r19	; 0x04
 908:	2b 83       	std	Y+3, r18	; 0x03
 90a:	d4 cf       	rjmp	.-88     	; 0x8b4 <video_line+0xa0>
		video_set_pixel(x0, y0);
 90c:	60 2f       	mov	r22, r16
 90e:	8e 2d       	mov	r24, r14
 910:	0e 94 cb 02 	call	0x596	; 0x596 <video_set_pixel>
		if(e2 > -dx)
 914:	8b 81       	ldd	r24, Y+3	; 0x03
 916:	9c 81       	ldd	r25, Y+4	; 0x04
 918:	a8 16       	cp	r10, r24
 91a:	b9 06       	cpc	r11, r25
 91c:	94 f4       	brge	.+36     	; 0x942 <__stack+0x43>
			err -= dy;
 91e:	88 19       	sub	r24, r8
 920:	99 09       	sbc	r25, r9
			x0 += sx;
 922:	29 81       	ldd	r18, Y+1	; 0x01
 924:	3a 81       	ldd	r19, Y+2	; 0x02
 926:	e2 0e       	add	r14, r18
 928:	f3 1e       	adc	r15, r19
		if(e2 < dy)
 92a:	2b 81       	ldd	r18, Y+3	; 0x03
 92c:	3c 81       	ldd	r19, Y+4	; 0x04
 92e:	28 15       	cp	r18, r8
 930:	39 05       	cpc	r19, r9
 932:	24 f4       	brge	.+8      	; 0x93c <__stack+0x3d>
			err += dx;
 934:	8c 0d       	add	r24, r12
 936:	9d 1d       	adc	r25, r13
			y0 += sy;
 938:	02 0d       	add	r16, r2
 93a:	13 1d       	adc	r17, r3
 93c:	9c 83       	std	Y+4, r25	; 0x04
 93e:	8b 83       	std	Y+3, r24	; 0x03
 940:	bd cf       	rjmp	.-134    	; 0x8bc <video_line+0xa8>
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	9c 81       	ldd	r25, Y+4	; 0x04
 946:	f1 cf       	rjmp	.-30     	; 0x92a <__stack+0x2b>

00000948 <video_char>:
{
 948:	af 92       	push	r10
 94a:	bf 92       	push	r11
 94c:	cf 92       	push	r12
 94e:	df 92       	push	r13
 950:	ef 92       	push	r14
 952:	ff 92       	push	r15
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	06 2f       	mov	r16, r22
	ex = x + 5;
 95e:	95 e0       	ldi	r25, 0x05	; 5
 960:	98 0f       	add	r25, r24
	if(ex < PWIDTH && ey < HEIGHT)
 962:	90 3a       	cpi	r25, 0xA0	; 160
 964:	d0 f4       	brcc	.+52     	; 0x99a <video_char+0x52>
	ey = y + 7;
 966:	97 e0       	ldi	r25, 0x07	; 7
 968:	96 0f       	add	r25, r22
	if(ex < PWIDTH && ey < HEIGHT)
 96a:	90 36       	cpi	r25, 0x60	; 96
 96c:	b0 f4       	brcc	.+44     	; 0x99a <video_char+0x52>
	v = font5x7 + 5 * (c - 32);
 96e:	40 52       	subi	r20, 0x20	; 32
 970:	55 0b       	sbc	r21, r21
 972:	95 e0       	ldi	r25, 0x05	; 5
 974:	94 9f       	mul	r25, r20
 976:	90 01       	movw	r18, r0
 978:	95 9f       	mul	r25, r21
 97a:	30 0d       	add	r19, r0
 97c:	11 24       	eor	r1, r1
 97e:	a9 01       	movw	r20, r18
 980:	48 59       	subi	r20, 0x98	; 152
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	7a 01       	movw	r14, r20
 986:	c1 e0       	ldi	r28, 0x01	; 1
 988:	8b 3f       	cpi	r24, 0xFB	; 251
 98a:	08 f4       	brcc	.+2      	; 0x98e <video_char+0x46>
 98c:	c6 e0       	ldi	r28, 0x06	; 6
 98e:	18 2f       	mov	r17, r24
 990:	1c 0f       	add	r17, r28
 992:	c1 2e       	mov	r12, r17
 994:	cc 1a       	sub	r12, r28
		for(; x < ex; ++x, ++v)
 996:	c1 50       	subi	r28, 0x01	; 1
 998:	59 f4       	brne	.+22     	; 0x9b0 <video_char+0x68>
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	08 95       	ret
			p = pgm_read_byte(v);
 9b0:	f7 01       	movw	r30, r14
 9b2:	a4 90       	lpm	r10, Z
			for(y = a, b = 1; y < ey; ++y, b <<= 1)
 9b4:	d1 e0       	ldi	r29, 0x01	; 1
 9b6:	09 3f       	cpi	r16, 0xF9	; 249
 9b8:	08 f4       	brcc	.+2      	; 0x9bc <video_char+0x74>
 9ba:	d8 e0       	ldi	r29, 0x08	; 8
 9bc:	dd 24       	eor	r13, r13
 9be:	d3 94       	inc	r13
 9c0:	b0 2e       	mov	r11, r16
 9c2:	bd 0e       	add	r11, r29
 9c4:	6b 2d       	mov	r22, r11
 9c6:	6d 1b       	sub	r22, r29
 9c8:	d1 50       	subi	r29, 0x01	; 1
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <video_char+0x8c>
		for(; x < ex; ++x, ++v)
 9cc:	ff ef       	ldi	r31, 0xFF	; 255
 9ce:	ef 1a       	sub	r14, r31
 9d0:	ff 0a       	sbc	r15, r31
 9d2:	df cf       	rjmp	.-66     	; 0x992 <video_char+0x4a>
				if(p & b)
 9d4:	8d 2d       	mov	r24, r13
 9d6:	8a 21       	and	r24, r10
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <video_char+0x98>
					video_sp(x, y);
 9da:	8c 2d       	mov	r24, r12
 9dc:	0e 94 77 02 	call	0x4ee	; 0x4ee <video_sp>
			for(y = a, b = 1; y < ey; ++y, b <<= 1)
 9e0:	dd 0c       	add	r13, r13
 9e2:	f0 cf       	rjmp	.-32     	; 0x9c4 <video_char+0x7c>

000009e4 <video_string>:
{
 9e4:	0f 93       	push	r16
 9e6:	1f 93       	push	r17
 9e8:	cf 93       	push	r28
 9ea:	df 93       	push	r29
 9ec:	c8 2f       	mov	r28, r24
 9ee:	d6 2f       	mov	r29, r22
 9f0:	8a 01       	movw	r16, r20
	while(*s)
 9f2:	f8 01       	movw	r30, r16
 9f4:	41 91       	ld	r20, Z+
 9f6:	8f 01       	movw	r16, r30
 9f8:	41 11       	cpse	r20, r1
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <video_string+0x22>
}
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret
		video_char(x, y, *s++);
 a06:	6d 2f       	mov	r22, r29
 a08:	8c 2f       	mov	r24, r28
 a0a:	0e 94 a4 04 	call	0x948	; 0x948 <video_char>
		x += 6;
 a0e:	ca 5f       	subi	r28, 0xFA	; 250
 a10:	f0 cf       	rjmp	.-32     	; 0x9f2 <video_string+0xe>

00000a12 <video_bitmap>:
{
 a12:	8f 92       	push	r8
 a14:	9f 92       	push	r9
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	ec 01       	movw	r28, r24
 a2a:	e6 2e       	mov	r14, r22
 a2c:	f4 2e       	mov	r15, r20
 a2e:	b2 2e       	mov	r11, r18
	for(end = img + len; img < end; ++img)
 a30:	6c 01       	movw	r12, r24
 a32:	c0 0e       	add	r12, r16
 a34:	d1 1e       	adc	r13, r17
 a36:	16 2f       	mov	r17, r22
 a38:	cc 15       	cp	r28, r12
 a3a:	dd 05       	cpc	r29, r13
 a3c:	60 f0       	brcs	.+24     	; 0xa56 <video_bitmap+0x44>
}
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	1f 91       	pop	r17
 a44:	0f 91       	pop	r16
 a46:	ff 90       	pop	r15
 a48:	ef 90       	pop	r14
 a4a:	df 90       	pop	r13
 a4c:	cf 90       	pop	r12
 a4e:	bf 90       	pop	r11
 a50:	9f 90       	pop	r9
 a52:	8f 90       	pop	r8
 a54:	08 95       	ret
 a56:	87 e0       	ldi	r24, 0x07	; 7
 a58:	88 2e       	mov	r8, r24
 a5a:	91 2c       	mov	r9, r1
		for(mask = 1; mask < 0x80; mask <<= 1)
 a5c:	01 e0       	ldi	r16, 0x01	; 1
			if(*img & mask)
 a5e:	88 81       	ld	r24, Y
 a60:	80 23       	and	r24, r16
 a62:	21 f0       	breq	.+8      	; 0xa6c <video_bitmap+0x5a>
				video_sp(x0, y0);
 a64:	6f 2d       	mov	r22, r15
 a66:	81 2f       	mov	r24, r17
 a68:	0e 94 77 02 	call	0x4ee	; 0x4ee <video_sp>
			if(++x0 == x1)
 a6c:	1f 5f       	subi	r17, 0xFF	; 255
 a6e:	1b 11       	cpse	r17, r11
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <video_bitmap+0x64>
				++y0;
 a72:	f3 94       	inc	r15
				x0 = sx;
 a74:	1e 2d       	mov	r17, r14
		for(mask = 1; mask < 0x80; mask <<= 1)
 a76:	00 0f       	add	r16, r16
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	88 1a       	sub	r8, r24
 a7c:	91 08       	sbc	r9, r1
 a7e:	79 f7       	brne	.-34     	; 0xa5e <video_bitmap+0x4c>
	for(end = img + len; img < end; ++img)
 a80:	21 96       	adiw	r28, 0x01	; 1
 a82:	da cf       	rjmp	.-76     	; 0xa38 <video_bitmap+0x26>

00000a84 <video_shift>:
{
 a84:	2f 92       	push	r2
 a86:	3f 92       	push	r3
 a88:	5f 92       	push	r5
 a8a:	6f 92       	push	r6
 a8c:	7f 92       	push	r7
 a8e:	8f 92       	push	r8
 a90:	9f 92       	push	r9
 a92:	af 92       	push	r10
 a94:	bf 92       	push	r11
 a96:	cf 92       	push	r12
 a98:	df 92       	push	r13
 a9a:	ef 92       	push	r14
 a9c:	ff 92       	push	r15
 a9e:	0f 93       	push	r16
 aa0:	1f 93       	push	r17
 aa2:	cf 93       	push	r28
 aa4:	df 93       	push	r29
	switch(dir)
 aa6:	62 30       	cpi	r22, 0x02	; 2
 aa8:	e1 f1       	breq	.+120    	; 0xb22 <video_shift+0x9e>
 aaa:	a8 f4       	brcc	.+42     	; 0xad6 <video_shift+0x52>
 aac:	24 e1       	ldi	r18, 0x14	; 20
 aae:	82 9f       	mul	r24, r18
 ab0:	f0 01       	movw	r30, r0
 ab2:	11 24       	eor	r1, r1
 ab4:	61 11       	cpse	r22, r1
 ab6:	24 c0       	rjmp	.+72     	; 0xb00 <video_shift+0x7c>
			src = frame + distance * WIDTH;
 ab8:	ee 5e       	subi	r30, 0xEE	; 238
 aba:	fe 4f       	sbci	r31, 0xFE	; 254
			dst = frame;
 abc:	a2 e1       	ldi	r26, 0x12	; 18
 abe:	b1 e0       	ldi	r27, 0x01	; 1
			while(src <= end)
 ac0:	38 e0       	ldi	r19, 0x08	; 8
 ac2:	e2 39       	cpi	r30, 0x92	; 146
 ac4:	f3 07       	cpc	r31, r19
 ac6:	09 f0       	breq	.+2      	; 0xaca <video_shift+0x46>
 ac8:	48 f4       	brcc	.+18     	; 0xadc <video_shift+0x58>
				*dst = *src;
 aca:	81 91       	ld	r24, Z+
 acc:	8d 93       	st	X+, r24
				*src = 0;
 ace:	ef 01       	movw	r28, r30
 ad0:	21 97       	sbiw	r28, 0x01	; 1
 ad2:	18 82       	st	Y, r1
				++src;
 ad4:	f5 cf       	rjmp	.-22     	; 0xac0 <video_shift+0x3c>
	switch(dir)
 ad6:	63 30       	cpi	r22, 0x03	; 3
 ad8:	09 f4       	brne	.+2      	; 0xadc <video_shift+0x58>
 ada:	6a c0       	rjmp	.+212    	; 0xbb0 <video_shift+0x12c>
}
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	ff 90       	pop	r15
 ae6:	ef 90       	pop	r14
 ae8:	df 90       	pop	r13
 aea:	cf 90       	pop	r12
 aec:	bf 90       	pop	r11
 aee:	af 90       	pop	r10
 af0:	9f 90       	pop	r9
 af2:	8f 90       	pop	r8
 af4:	7f 90       	pop	r7
 af6:	6f 90       	pop	r6
 af8:	5f 90       	pop	r5
 afa:	3f 90       	pop	r3
 afc:	2f 90       	pop	r2
 afe:	08 95       	ret
			src = dst - distance * WIDTH;
 b00:	82 e9       	ldi	r24, 0x92	; 146
 b02:	98 e0       	ldi	r25, 0x08	; 8
 b04:	dc 01       	movw	r26, r24
 b06:	ae 1b       	sub	r26, r30
 b08:	bf 0b       	sbc	r27, r31
 b0a:	fd 01       	movw	r30, r26
			dst = frame + HEIGHT * WIDTH;
 b0c:	dc 01       	movw	r26, r24
			while(src >= end)
 b0e:	c1 e0       	ldi	r28, 0x01	; 1
 b10:	e2 31       	cpi	r30, 0x12	; 18
 b12:	fc 07       	cpc	r31, r28
 b14:	18 f3       	brcs	.-58     	; 0xadc <video_shift+0x58>
				*dst = *src;
 b16:	80 81       	ld	r24, Z
 b18:	8c 93       	st	X, r24
				*src = 0;
 b1a:	10 82       	st	Z, r1
				--dst;
 b1c:	11 97       	sbiw	r26, 0x01	; 1
				--src;
 b1e:	31 97       	sbiw	r30, 0x01	; 1
 b20:	f6 cf       	rjmp	.-20     	; 0xb0e <video_shift+0x8a>
			shift = distance & 7;
 b22:	18 2f       	mov	r17, r24
 b24:	17 70       	andi	r17, 0x07	; 7
			for(line = 0; line < HEIGHT; ++line)
 b26:	42 e1       	ldi	r20, 0x12	; 18
 b28:	51 e0       	ldi	r21, 0x01	; 1
				src = dst + distance / 8;
 b2a:	86 95       	lsr	r24
 b2c:	86 95       	lsr	r24
 b2e:	86 95       	lsr	r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	8e 5e       	subi	r24, 0xEE	; 238
 b34:	9e 4f       	sbci	r25, 0xFE	; 254
 b36:	64 e2       	ldi	r22, 0x24	; 36
 b38:	71 e0       	ldi	r23, 0x01	; 1
					tmp |= *src >> (8 - shift);
 b3a:	e8 e0       	ldi	r30, 0x08	; 8
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	e1 1b       	sub	r30, r17
 b40:	f1 09       	sbc	r31, r1
				dst = frame + WIDTH * line;
 b42:	7a 01       	movw	r14, r20
				src = dst + distance / 8;
 b44:	ec 01       	movw	r28, r24
				while(src <= end)
 b46:	28 81       	ld	r18, Y
 b48:	a2 2f       	mov	r26, r18
 b4a:	01 2e       	mov	r0, r17
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <video_shift+0xcc>
 b4e:	aa 0f       	add	r26, r26
 b50:	0a 94       	dec	r0
 b52:	ea f7       	brpl	.-6      	; 0xb4e <video_shift+0xca>
 b54:	6c 17       	cp	r22, r28
 b56:	7d 07       	cpc	r23, r29
 b58:	d0 f4       	brcc	.+52     	; 0xb8e <video_shift+0x10a>
 b5a:	9a 01       	movw	r18, r20
 b5c:	2d 5e       	subi	r18, 0xED	; 237
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	28 17       	cp	r18, r24
 b62:	39 07       	cpc	r19, r25
 b64:	10 f1       	brcs	.+68     	; 0xbaa <video_shift+0x126>
 b66:	28 1b       	sub	r18, r24
 b68:	39 0b       	sbc	r19, r25
				*src = 0;
 b6a:	ec 01       	movw	r28, r24
 b6c:	c2 0f       	add	r28, r18
 b6e:	d3 1f       	adc	r29, r19
 b70:	18 82       	st	Y, r1
				*dst = tmp;
 b72:	24 0f       	add	r18, r20
 b74:	35 1f       	adc	r19, r21
				tmp = *src << shift;
 b76:	e9 01       	movw	r28, r18
 b78:	a8 83       	st	Y, r26
			for(line = 0; line < HEIGHT; ++line)
 b7a:	4c 5e       	subi	r20, 0xEC	; 236
 b7c:	5f 4f       	sbci	r21, 0xFF	; 255
 b7e:	44 96       	adiw	r24, 0x14	; 20
 b80:	6c 5e       	subi	r22, 0xEC	; 236
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	d8 e0       	ldi	r29, 0x08	; 8
 b86:	42 39       	cpi	r20, 0x92	; 146
 b88:	5d 07       	cpc	r21, r29
 b8a:	d9 f6       	brne	.-74     	; 0xb42 <video_shift+0xbe>
 b8c:	a7 cf       	rjmp	.-178    	; 0xadc <video_shift+0x58>
					*src = 0;
 b8e:	19 92       	st	Y+, r1
					tmp |= *src >> (8 - shift);
 b90:	28 81       	ld	r18, Y
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	0e 2e       	mov	r0, r30
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <video_shift+0x118>
 b98:	35 95       	asr	r19
 b9a:	27 95       	ror	r18
 b9c:	0a 94       	dec	r0
 b9e:	e2 f7       	brpl	.-8      	; 0xb98 <video_shift+0x114>
 ba0:	2a 2b       	or	r18, r26
					*dst = tmp;
 ba2:	d7 01       	movw	r26, r14
 ba4:	2d 93       	st	X+, r18
 ba6:	7d 01       	movw	r14, r26
					++dst;
 ba8:	ce cf       	rjmp	.-100    	; 0xb46 <video_shift+0xc2>
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	20 e0       	ldi	r18, 0x00	; 0
 bae:	dd cf       	rjmp	.-70     	; 0xb6a <video_shift+0xe6>
			shift = distance & 7;
 bb0:	e8 2f       	mov	r30, r24
 bb2:	e7 70       	andi	r30, 0x07	; 7
 bb4:	5e 2e       	mov	r5, r30
				src = dst - distance / 8;
 bb6:	86 95       	lsr	r24
 bb8:	86 95       	lsr	r24
 bba:	86 95       	lsr	r24
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	a5 e2       	ldi	r26, 0x25	; 37
 bc0:	b1 e0       	ldi	r27, 0x01	; 1
 bc2:	42 e1       	ldi	r20, 0x12	; 18
 bc4:	51 e0       	ldi	r21, 0x01	; 1
 bc6:	23 e1       	ldi	r18, 0x13	; 19
 bc8:	22 2e       	mov	r2, r18
 bca:	21 e0       	ldi	r18, 0x01	; 1
 bcc:	32 2e       	mov	r3, r18
 bce:	32 e9       	ldi	r19, 0x92	; 146
 bd0:	83 2e       	mov	r8, r19
 bd2:	38 e0       	ldi	r19, 0x08	; 8
 bd4:	93 2e       	mov	r9, r19
					tmp |= *src << (8 - shift);
 bd6:	28 e0       	ldi	r18, 0x08	; 8
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	39 01       	movw	r6, r18
 bdc:	6e 1a       	sub	r6, r30
 bde:	71 08       	sbc	r7, r1
 be0:	7c 01       	movw	r14, r24
 be2:	f3 e1       	ldi	r31, 0x13	; 19
 be4:	ef 1a       	sub	r14, r31
 be6:	f1 08       	sbc	r15, r1
				src = dst - distance / 8;
 be8:	bd 01       	movw	r22, r26
 bea:	68 1b       	sub	r22, r24
 bec:	79 0b       	sbc	r23, r25
				while(src >= end)
 bee:	6a 01       	movw	r12, r20
 bf0:	4c 5e       	subi	r20, 0xEC	; 236
 bf2:	5f 4f       	sbci	r21, 0xFF	; 255
 bf4:	8a 01       	movw	r16, r20
				src = dst - distance / 8;
 bf6:	fb 01       	movw	r30, r22
				while(src >= end)
 bf8:	a0 80       	ld	r10, Z
 bfa:	b1 2c       	mov	r11, r1
 bfc:	05 2c       	mov	r0, r5
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <video_shift+0x180>
 c00:	b5 94       	asr	r11
 c02:	a7 94       	ror	r10
 c04:	0a 94       	dec	r0
 c06:	e2 f7       	brpl	.-8      	; 0xc00 <video_shift+0x17c>
 c08:	e2 15       	cp	r30, r2
 c0a:	f3 05       	cpc	r31, r3
 c0c:	b0 f4       	brcc	.+44     	; 0xc3a <video_shift+0x1b6>
 c0e:	97 01       	movw	r18, r14
 c10:	6c 15       	cp	r22, r12
 c12:	7d 05       	cpc	r23, r13
 c14:	10 f4       	brcc	.+4      	; 0xc1a <video_shift+0x196>
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	20 e0       	ldi	r18, 0x00	; 0
				*src = 0;
 c1a:	62 0f       	add	r22, r18
 c1c:	73 1f       	adc	r23, r19
 c1e:	fb 01       	movw	r30, r22
 c20:	10 82       	st	Z, r1
				*dst = tmp;
 c22:	2a 0f       	add	r18, r26
 c24:	3b 1f       	adc	r19, r27
				tmp = *src >> shift;
 c26:	e9 01       	movw	r28, r18
 c28:	a8 82       	st	Y, r10
			for(line = 0; line < HEIGHT; ++line)
 c2a:	54 96       	adiw	r26, 0x14	; 20
 c2c:	d4 e1       	ldi	r29, 0x14	; 20
 c2e:	2d 0e       	add	r2, r29
 c30:	31 1c       	adc	r3, r1
 c32:	84 16       	cp	r8, r20
 c34:	95 06       	cpc	r9, r21
 c36:	c1 f6       	brne	.-80     	; 0xbe8 <video_shift+0x164>
 c38:	51 cf       	rjmp	.-350    	; 0xadc <video_shift+0x58>
					*src = 0;
 c3a:	10 82       	st	Z, r1
					tmp |= *src << (8 - shift);
 c3c:	22 91       	ld	r18, -Z
 c3e:	06 2c       	mov	r0, r6
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <video_shift+0x1c0>
 c42:	22 0f       	add	r18, r18
 c44:	0a 94       	dec	r0
 c46:	ea f7       	brpl	.-6      	; 0xc42 <video_shift+0x1be>
 c48:	2a 29       	or	r18, r10
					*dst = tmp;
 c4a:	e8 01       	movw	r28, r16
 c4c:	2a 93       	st	-Y, r18
 c4e:	8e 01       	movw	r16, r28
					--dst;
 c50:	d3 cf       	rjmp	.-90     	; 0xbf8 <video_shift+0x174>

00000c52 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 c52:	1f 92       	push	r1
 c54:	0f 92       	push	r0
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	0f 92       	push	r0
 c5a:	11 24       	eor	r1, r1
 c5c:	2f 93       	push	r18
 c5e:	3f 93       	push	r19
 c60:	4f 93       	push	r20
 c62:	5f 93       	push	r21
 c64:	6f 93       	push	r22
 c66:	7f 93       	push	r23
 c68:	8f 93       	push	r24
 c6a:	9f 93       	push	r25
 c6c:	af 93       	push	r26
 c6e:	bf 93       	push	r27
 c70:	ef 93       	push	r30
 c72:	ff 93       	push	r31
	line_handler();
 c74:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <line_handler>
 c78:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <line_handler+0x1>
 c7c:	09 95       	icall
}
 c7e:	ff 91       	pop	r31
 c80:	ef 91       	pop	r30
 c82:	bf 91       	pop	r27
 c84:	af 91       	pop	r26
 c86:	9f 91       	pop	r25
 c88:	8f 91       	pop	r24
 c8a:	7f 91       	pop	r23
 c8c:	6f 91       	pop	r22
 c8e:	5f 91       	pop	r21
 c90:	4f 91       	pop	r20
 c92:	3f 91       	pop	r19
 c94:	2f 91       	pop	r18
 c96:	0f 90       	pop	r0
 c98:	0f be       	out	0x3f, r0	; 63
 c9a:	0f 90       	pop	r0
 c9c:	1f 90       	pop	r1
 c9e:	18 95       	reti

00000ca0 <main>:
#include <avr/io.h>
#include "video.h"

int main(void)
{
	video_begin(NTSC);
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	0e 94 22 02 	call	0x444	; 0x444 <video_begin>
	video_clear();
 ca6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <video_clear>
	video_rect(20, 20, 40, 40);
 caa:	28 e2       	ldi	r18, 0x28	; 40
 cac:	48 e2       	ldi	r20, 0x28	; 40
 cae:	64 e1       	ldi	r22, 0x14	; 20
 cb0:	84 e1       	ldi	r24, 0x14	; 20
 cb2:	0e 94 11 03 	call	0x622	; 0x622 <video_rect>
	video_line(0, 95, 127, 0);
 cb6:	30 e0       	ldi	r19, 0x00	; 0
 cb8:	20 e0       	ldi	r18, 0x00	; 0
 cba:	4f e7       	ldi	r20, 0x7F	; 127
 cbc:	50 e0       	ldi	r21, 0x00	; 0
 cbe:	6f e5       	ldi	r22, 0x5F	; 95
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	0e 94 0a 04 	call	0x814	; 0x814 <video_line>
	video_string(10, 70, "Hello!");
 cca:	40 e0       	ldi	r20, 0x00	; 0
 ccc:	51 e0       	ldi	r21, 0x01	; 1
 cce:	66 e4       	ldi	r22, 0x46	; 70
 cd0:	8a e0       	ldi	r24, 0x0A	; 10
 cd2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <video_string>

	for(;;)
 cd6:	ff cf       	rjmp	.-2      	; 0xcd6 <main+0x36>

00000cd8 <_exit>:
 cd8:	f8 94       	cli

00000cda <__stop_program>:
 cda:	ff cf       	rjmp	.-2      	; 0xcda <__stop_program>
